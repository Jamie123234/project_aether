import os
import cv2
import csv
import collections

# --- Configuration ---
# Path to the CSV file generated by the scanner
CSV_PATH = "anomalies.csv"

# Directory where the original frames are located
FRAMES_DIR = "frames"

# Directory where the new, annotated frames will be saved
VERIFIED_FRAMES_DIR = "verified_frames"
# -------------------

def verify_anomalies():
    """
    Reads the anomalies.csv file and draws circles on the corresponding frames
    to visually verify the detector's findings.
    """
    # Create the output directory if it doesn't exist
    if not os.path.exists(VERIFIED_FRAMES_DIR):
        os.makedirs(VERIFIED_FRAMES_DIR)
        print(f"Created directory: {VERIFIED_FRAMES_DIR}")

    # Read the CSV and group anomalies by frame number for efficiency
    anomalies_by_frame = collections.defaultdict(list)
    try:
        with open(CSV_PATH, 'r') as f:
            reader = csv.DictReader(f)
            for row in reader:
                frame_num = int(row['frame_number'])
                x = int(row['x'])
                y = int(row['y'])
                anomalies_by_frame[frame_num].append((x, y))
    except FileNotFoundError:
        print(f"Error: Could not find the file {CSV_PATH}. Please run anomaly_scanner.py first.")
        return

    if not anomalies_by_frame:
        print("No anomalies found in the CSV file to verify.")
        return

    print(f"Verifying {len(anomalies_by_frame)} frames with anomalies...")

    # Loop through each frame that has a detected anomaly
    for frame_num, coordinates in anomalies_by_frame.items():
        frame_filename = f"frame_{str(frame_num).zfill(5)}.jpg"
        frame_path = os.path.join(FRAMES_DIR, frame_filename)
        
        if not os.path.exists(frame_path):
            print(f"Warning: Frame not found for frame number {frame_num}. Skipping.")
            continue

        # Load the original frame
        image = cv2.imread(frame_path)

        # Draw a circle for each anomaly found in this frame
        for (x, y) in coordinates:
            center_coordinates = (x, y)
            radius = 20          # The size of the circle
            color = (0, 0, 255)  # Red color in BGR format
            thickness = 2        # Line thickness
            cv2.circle(image, center_coordinates, radius, color, thickness)
        
        # Save the new image with the circle to the verification folder
        output_path = os.path.join(VERIFIED_FRAMES_DIR, frame_filename)
        cv2.imwrite(output_path, image)

    print("-" * 20)
    print("Verification complete!")
    print(f"Check the images in the '{VERIFIED_FRAMES_DIR}' folder.")
    print("-" * 20)

if __name__ == "__main__":
    verify_anomalies()